show(GroupAJackknifed)
library(netjack)
data("GroupA")
Subject1 <- as_Net(GroupA[[i]], "Subject1")
show(Subject1)
Subject2 <- as_Net(GroupA[[2]], "Subject1", node.variables = list(community = c(rep(1,10), rep(2,10))))
show(Subject2)
GroupASamp = as_NetSample(GroupA, net.names = as.character(1:20) , node.variables = list(community = c(rep(1,10), rep(2,10))), sample.variables = list(group = rep(1, 20)))
show(GroupASamp)
Sub1Jackknifed <- net_apply(network = Subject1, net.function = "node_jackknife")
show(Sub1Jackknifed)
GroupAJackknifed <- net_apply(network = GroupASamp, net.function = "node_jackknife")
show(GroupAJackknifed)
GroupANetJackknifed <- net_apply(GroupASamp, net.function = "network_jackknife", net.function.args = list(network.variable = "community"))
show(GroupANetJackknifed)
library(netjack)
data("GroupA")
Subject1 <- as_Net(GroupA[[i]], "Subject1")
show(Subject1)
Subject2 <- as_Net(GroupA[[2]], "Subject1", node.variables = list(community = c(rep(1,10), rep(2,10))))
show(Subject2)
GroupASamp = as_NetSample(GroupA, net.names = as.character(1:20) , node.variables = list(community = c(rep(1,10), rep(2,10))), sample.variables = list(group = rep(1, 20)))
show(GroupASamp)
Sub1Jackknifed <- net_apply(network = Subject1, net.function = "node_jackknife")
show(Sub1Jackknifed)
GroupAJackknifed <- net_apply(network = GroupASamp, net.function = "node_jackknife")
show(GroupAJackknifed)
GroupANetJackknifed <- net_apply(GroupASamp, net.function = "network_jackknife", net.function.args = list(network.variable = "community"))
show(GroupANetJackknifed)
Sub1JackknifedGlobEff <- net_stat_apply(Sub1Jackknifed, net.stat.fun = global_efficiency)
show(Sub1JackknifedGlobEff)
GroupAJackknifedGlobEff <- net_stat_apply(GroupAJackknifed, net.stat.fun = global_efficiency)
show(GroupAJackknifedGlobEff)
library(netjack)
data("GroupA")
Subject1 <- as_Net(GroupA[[i]], "Subject1")
show(Subject1)
Subject2 <- as_Net(GroupA[[2]], "Subject1", node.variables = list(community = c(rep(1,10), rep(2,10))))
show(Subject2)
GroupASamp = as_NetSample(GroupA, net.names = as.character(1:20) , node.variables = list(community = c(rep(1,10), rep(2,10))), sample.variables = list(group = rep(1, 20)))
show(GroupASamp)
Sub1Jackknifed <- net_apply(network = Subject1, net.function = "node_jackknife")
show(Sub1Jackknifed)
GroupAJackknifed <- net_apply(network = GroupASamp, net.function = "node_jackknife")
show(GroupAJackknifed)
GroupANetJackknifed <- net_apply(GroupASamp, net.function = "network_jackknife", net.function.args = list(network.variable = "community"))
show(GroupANetJackknifed)
Sub1JackknifedGlobEff <- net_stat_apply(Sub1Jackknifed, net.stat.fun = global_efficiency)
show(Sub1JackknifedGlobEff)
GroupAJackknifedGlobEff <- net_stat_apply(GroupAJackknifed, net.stat.fun = global_efficiency)
show(GroupAJackknifedGlobEff)
Sub1Data = to_data_frame(Sub1JackknifedGlobEff)
head(Sub1Data)
GroupAData = to_data_frame(GroupAJackknifedGlobEff)
head(GroupAData)
GroupASamp = as_NetSample(GroupA, net.names = as.character(1:20))
GroupAJackknifed = net_apply(GroupASamp, net.function = "node_jackknife")
GroupAJackknifedGlobEff = net_stat_apply(GroupASamp, net.stat.fun =  "global_efficiency")
GroupASamp = as_NetSample(GroupA, net.names = as.character(1:20))
GroupAJackknifed = net_apply(GroupASamp, net.function = "node_jackknife")
GroupAJackknifedGlobEff = net_stat_apply(GroupAJackknifed, net.stat.fun =  "global_efficiency")
diff_test(GroupAJackknifedGlobEff)
net_ggPlot(GroupAJackknifedGlobEff)
as_data_frame(GroupAJackknifedGlobEff)
to_data_frame(GroupAJackknifedGlobEff)
fullGroup = c(GroupA, GroupB)
fullSamp = as_NetSample(fullGroup, sample.variables = list(group = c(rep("GroupA", 20), rep("GroupB", 20))))
fullSamp = as_NetSample(fullGroup,net.names = 1:40, sample.variables = list(group = c(rep("GroupA", 20), rep("GroupB", 20))))
fullSamp = as_NetSample(fullGroup,net.names = as.character(1:40), sample.variables = list(group = c(rep("GroupA", 20), rep("GroupB", 20))))
fullSampJackknifed = net_apply(fullSamp, net.function = "node_jackknife")
fullSampleJackknifedGlobEff = net_stat_apply(fullSampJackknifed, net.stat.fun = "global_efficiency")
group_test(fullSampleJackknifedGlobEff)
group_test(fullSampleJackknifedGlobEff, grouping.variable = "group")
to_data_frame(fullSampleJackknifedGlobEff)
grouping.variable = "group"
form = paste0("nets.stat", "~", grouping.variable)
form
form = stats::as.formula(form)
group_test(fullSampleJackknifedGlobEff, grouping.variable = "group")
group_test(fullSampleJackknifedGlobEff, grouping.variable = "group",non.parametric = F)
library(netjack)
data("GroupA")
Subject1 <- as_Net(GroupA[[i]], "Subject1")
show(Subject1)
Subject2 <- as_Net(GroupA[[2]], "Subject1", node.variables = list(community = c(rep(1,10), rep(2,10))))
show(Subject2)
GroupASamp = as_NetSample(GroupA, net.names = as.character(1:20) , node.variables = list(community = c(rep(1,10), rep(2,10))), sample.variables = list(group = rep(1, 20)))
show(GroupASamp)
Sub1Jackknifed <- net_apply(network = Subject1, net.function = "node_jackknife")
show(Sub1Jackknifed)
GroupAJackknifed <- net_apply(network = GroupASamp, net.function = "node_jackknife")
show(GroupAJackknifed)
GroupANetJackknifed <- net_apply(GroupASamp, net.function = "network_jackknife", net.function.args = list(network.variable = "community"))
show(GroupANetJackknifed)
Sub1JackknifedGlobEff <- net_stat_apply(Sub1Jackknifed, net.stat.fun = global_efficiency)
show(Sub1JackknifedGlobEff)
GroupAJackknifedGlobEff <- net_stat_apply(GroupAJackknifed, net.stat.fun = global_efficiency)
show(GroupAJackknifedGlobEff)
Sub1Data = to_data_frame(Sub1JackknifedGlobEff)
names(Sub1Data)
GroupAData = to_data_frame(GroupAJackknifedGlobEff)
head(GroupAData)
GroupASamp = as_NetSample(GroupA, net.names = as.character(1:20))
GroupAJackknifed = net_apply(GroupASamp, net.function = "node_jackknife")
GroupAJackknifedGlobEff = net_stat_apply(GroupAJackknifed, net.stat.fun =  "global_efficiency")
diff_test(GroupAJackknifedGlobEff)
net_ggPlot(GroupAJackknifedGlobEff)
fullGroup = c(GroupA, GroupB)
fullSamp = as_NetSample(fullGroup,net.names = as.character(1:40), sample.variables = list(group = c(rep("GroupA", 20), rep("GroupB", 20))))
fullSampJackknifed = net_apply(fullSamp, net.function = "node_jackknife")
fullSampleJackknifedGlobEff = net_stat_apply(fullSampJackknifed, net.stat.fun = "global_efficiency")
group_test(fullSampleJackknifedGlobEff, grouping.variable = "group",non.parametric = F)
netGroup_ggPlot(fullSampleJackknifedGlobEff, grouping.variable="group")
library(netjack)
data("GroupA")
Subject1 <- as_Net(GroupA[[i]], "Subject1")
show(Subject1)
Subject2 <- as_Net(GroupA[[2]], "Subject1", node.variables = list(community = c(rep(1,10), rep(2,10))))
show(Subject2)
GroupASamp = as_NetSample(GroupA, net.names = as.character(1:20) , node.variables = list(community = c(rep(1,10), rep(2,10))), sample.variables = list(group = rep(1, 20)))
show(GroupASamp)
Sub1Jackknifed <- net_apply(network = Subject1, net.function = "node_jackknife")
show(Sub1Jackknifed)
GroupAJackknifed <- net_apply(network = GroupASamp, net.function = "node_jackknife")
show(GroupAJackknifed)
GroupANetJackknifed <- net_apply(GroupASamp, net.function = "network_jackknife", net.function.args = list(network.variable = "community"))
show(GroupANetJackknifed)
Sub1JackknifedGlobEff <- net_stat_apply(Sub1Jackknifed, net.stat.fun = global_efficiency)
show(Sub1JackknifedGlobEff)
GroupAJackknifedGlobEff <- net_stat_apply(GroupAJackknifed, net.stat.fun = global_efficiency)
show(GroupAJackknifedGlobEff)
Sub1Data = to_data_frame(Sub1JackknifedGlobEff)
names(Sub1Data)
GroupAData = to_data_frame(GroupAJackknifedGlobEff)
head(GroupAData)
GroupASamp = as_NetSample(GroupA, net.names = as.character(1:20))
GroupAJackknifed = net_apply(GroupASamp, net.function = "node_jackknife")
GroupAJackknifedGlobEff = net_stat_apply(GroupAJackknifed, net.stat.fun =  "global_efficiency")
diff_test(GroupAJackknifedGlobEff)
net_ggPlot(GroupAJackknifedGlobEff)
net_ggPlot(GroupAJackknifedGlobEff)
data("GroupA")
Subject1 <- as_Net(GroupA[[i]], "Subject1")
show(Subject1)
Subject2 <- as_Net(GroupA[[2]], "Subject1", node.variables = list(community = c(rep(1,10), rep(2,10))))
show(Subject2)
GroupASamp = as_NetSample(GroupA, net.names = as.character(1:20) , node.variables = list(community = c(rep(1,10), rep(2,10))), sample.variables = list(group = rep(1, 20)))
show(GroupASamp)
Sub1Jackknifed <- net_apply(network = Subject1, net.function = "node_jackknife")
show(Sub1Jackknifed)
GroupAJackknifed <- net_apply(network = GroupASamp, net.function = "node_jackknife")
show(GroupAJackknifed)
GroupANetJackknifed <- net_apply(GroupASamp, net.function = "network_jackknife", net.function.args = list(network.variable = "community"))
show(GroupANetJackknifed)
Sub1JackknifedGlobEff <- net_stat_apply(Sub1Jackknifed, net.stat.fun = global_efficiency)
show(Sub1JackknifedGlobEff)
GroupAJackknifedGlobEff <- net_stat_apply(GroupAJackknifed, net.stat.fun = global_efficiency)
show(GroupAJackknifedGlobEff)
Sub1Data = to_data_frame(Sub1JackknifedGlobEff)
names(Sub1Data)
GroupAData = to_data_frame(GroupAJackknifedGlobEff)
head(GroupAData)
GroupASamp = as_NetSample(GroupA, net.names = as.character(1:20))
GroupAJackknifed = net_apply(GroupASamp, net.function = "node_jackknife")
GroupAJackknifedGlobEff = net_stat_apply(GroupAJackknifed, net.stat.fun =  "global_efficiency")
diff_test(GroupAJackknifedGlobEff)
net_ggPlot(GroupAJackknifedGlobEff)
library(netjack)
data("GroupA")
Subject1 <- as_Net(GroupA[[i]], "Subject1")
show(Subject1)
Subject2 <- as_Net(GroupA[[2]], "Subject1", node.variables = list(community = c(rep(1,10), rep(2,10))))
show(Subject2)
GroupASamp = as_NetSample(GroupA, net.names = as.character(1:20) , node.variables = list(community = c(rep(1,10), rep(2,10))), sample.variables = list(group = rep(1, 20)))
show(GroupASamp)
Sub1Jackknifed <- net_apply(network = Subject1, net.function = "node_jackknife")
show(Sub1Jackknifed)
GroupAJackknifed <- net_apply(network = GroupASamp, net.function = "node_jackknife")
show(GroupAJackknifed)
GroupANetJackknifed <- net_apply(GroupASamp, net.function = "network_jackknife", net.function.args = list(network.variable = "community"))
show(GroupANetJackknifed)
Sub1JackknifedGlobEff <- net_stat_apply(Sub1Jackknifed, net.stat.fun = global_efficiency)
show(Sub1JackknifedGlobEff)
GroupAJackknifedGlobEff <- net_stat_apply(GroupAJackknifed, net.stat.fun = global_efficiency)
show(GroupAJackknifedGlobEff)
Sub1Data = to_data_frame(Sub1JackknifedGlobEff)
names(Sub1Data)
GroupAData = to_data_frame(GroupAJackknifedGlobEff)
head(GroupAData)
GroupASamp = as_NetSample(GroupA, net.names = as.character(1:20))
GroupAJackknifed = net_apply(GroupASamp, net.function = "node_jackknife")
GroupAJackknifedGlobEff = net_stat_apply(GroupAJackknifed, net.stat.fun =  "global_efficiency")
diff_test(GroupAJackknifedGlobEff)
net_ggPlot(GroupAJackknifedGlobEff)
fullGroup = c(GroupA, GroupB)
fullSamp = as_NetSample(fullGroup,net.names = as.character(1:40), sample.variables = list(group = c(rep("GroupA", 20), rep("GroupB", 20))))
fullSampJackknifed = net_apply(fullSamp, net.function = "node_jackknife")
fullSampleJackknifedGlobEff = net_stat_apply(fullSampJackknifed, net.stat.fun = "global_efficiency")
group_test(fullSampleJackknifedGlobEff, grouping.variable = "group")
netGroup_ggPlot(fullSampleJackknifedGlobEff, grouping.variable="group")
plot(1:10)
plot(10:1)
knitr::kable(head(mtcars, 10))
group_diff_test(fullSampleJackknifedGlobEff, grouping.variable = "group")
netGroupDiff_ggPlot(fullSampleJackknifedGlobEff, grouping.variable="group")
library(netjack)
devtools::build()
devtools::use_vignette("my-vignette")
rmarkdown::html_vignette
library(netjack)
library(netjack)
library(netjack)
nNets =  1:26
combn(nNets, 2)
t(cbind(combn(1:nNets, 2), combn(nNets:1, 2)))
combn(1:nNets, 2)
nNets = 26
combn(1:nNets, 2)
combn(nNets:1, 2)
index = t(cbind(combn(1:nNets, 2), combn(nNets:1, 2)))
View(index)
index = rbind(index,cbind(1:nNets, 1:nNets))
26^2
?mapply
setGeneric("pairwise_net_stat_apply", function(netSet, net.stat.fun, net.stat.fun.args, net.stat.name, symmetric = TRUE, self.comp = FALSE) {
standardGeneric("pairwise_net_stat_apply")
})
#' @describeIn pairwise_net_stat_apply net_stat_apply for NetSample
setMethod("pairwise_net_stat_apply", signature = c(netSet = "NetSample", net.stat.fun = "ANY",
net.stat.fun.args = "ANY", net.stat.name = "ANY",
symmetric = "logical", self.comp = "logical"),
function(netSet, net.stat.fun, net.stat.fun.args, net.stat.name, symmetric, self.comp){
if(missing(net.stat.name)){
net.stat.name = deparse(substitute(net.stat.fun))
}
net.stat.fun = match.fun(net.stat.fun)
if(missing(net.stat.fun.args)){
net.stat.fun.args = list()
}
nNets = length(netSet@nets)
if(symmetric){
index = t(combn(1:nNets, 2))
}else{
index = t(cbind(combn(1:nNets, 2), combn(nNets:1, 2)))
}
if(self.comp){
index = rbind(index,cbind(1:nNets, 1:nNets))
}
pairwise.vector = mapply(FUN = pairwise_fun_wrapper,index1 = index[,1], index2 = index[,2],
MoreArgs = list(net.stat.fun = net.stat.fun, net.stat.fun.args = net.stat.fun.args))
#
# toReturn = methods::new("NetStatSet",fun = netSet@fun,
#                         fun.name = netSet@fun.name,
#                         fun.args = netSet@fun.args,
#                         stat.fun = net.stat.fun,
#                         stat.fun.name = net.stat.name,
#                         stat.fun.args = net.stat.fun.args,
#                         orig.net.name = netSet@orig.net.name,
#                         orig.net.stat = orig.stat,
#                         nets.stat = nets.stat,
#                         nets.names = netSet@nets.names)
return(pairwise.vector)
})
edit_dist <- function(Net1, Net2){
nNodes = dim(Net1@net)[[1]]
editDist = abs(Net1@net - Net2@net)/(((nNodes-1)*nNodes)/2)
return(editDist)
}
library(netjack)
data("GroupA")
testSet = as_NetSample(GroupA, net.names = 1:20)
pairwise_fun_wrapper <- function(index1, index2, nets, net.stat.fun, net.stat.fun.args ){
return(do.call(net.stat.fun, args = c(list(nets[index1], nets[index2]), net.stat.fun.args)))
}
testPair = pairwise_net_stat_apply(testSet, edit_dist)
setGeneric("pairwise_net_stat_apply", function(netSet, net.stat.fun, net.stat.fun.args, net.stat.name, symmetric = TRUE, self.comp = FALSE) {
standardGeneric("pairwise_net_stat_apply")
})
#' @describeIn pairwise_net_stat_apply net_stat_apply for NetSample
setMethod("pairwise_net_stat_apply", signature = c(netSet = "NetSample", net.stat.fun = "ANY",
net.stat.fun.args = "ANY", net.stat.name = "ANY",
symmetric = "logical", self.comp = "logical"),
function(netSet, net.stat.fun, net.stat.fun.args, net.stat.name, symmetric = TRUE, self.comp = FALSE){
if(missing(net.stat.name)){
net.stat.name = deparse(substitute(net.stat.fun))
}
net.stat.fun = match.fun(net.stat.fun)
if(missing(net.stat.fun.args)){
net.stat.fun.args = list()
}
nNets = length(netSet@nets)
if(symmetric){
index = t(combn(1:nNets, 2))
}else{
index = t(cbind(combn(1:nNets, 2), combn(nNets:1, 2)))
}
if(self.comp){
index = rbind(index,cbind(1:nNets, 1:nNets))
}
pairwise.vector = mapply(FUN = pairwise_fun_wrapper,index1 = index[,1], index2 = index[,2],
MoreArgs = list(net.stat.fun = net.stat.fun, net.stat.fun.args = net.stat.fun.args))
#
# toReturn = methods::new("NetStatSet",fun = netSet@fun,
#                         fun.name = netSet@fun.name,
#                         fun.args = netSet@fun.args,
#                         stat.fun = net.stat.fun,
#                         stat.fun.name = net.stat.name,
#                         stat.fun.args = net.stat.fun.args,
#                         orig.net.name = netSet@orig.net.name,
#                         orig.net.stat = orig.stat,
#                         nets.stat = nets.stat,
#                         nets.names = netSet@nets.names)
return(pairwise.vector)
})
testPair = pairwise_net_stat_apply(testSet, edit_dist)
setMethod("pairwise_net_stat_apply", signature = c(netSet = "NetSample", net.stat.fun = "ANY",
net.stat.fun.args = "ANY", net.stat.name = "ANY",
symmetric = "ANY", self.comp = "ANY"),
function(netSet, net.stat.fun, net.stat.fun.args, net.stat.name, symmetric = TRUE, self.comp = FALSE){
if(missing(net.stat.name)){
net.stat.name = deparse(substitute(net.stat.fun))
}
net.stat.fun = match.fun(net.stat.fun)
if(missing(net.stat.fun.args)){
net.stat.fun.args = list()
}
nNets = length(netSet@nets)
if(symmetric){
index = t(combn(1:nNets, 2))
}else{
index = t(cbind(combn(1:nNets, 2), combn(nNets:1, 2)))
}
if(self.comp){
index = rbind(index,cbind(1:nNets, 1:nNets))
}
pairwise.vector = mapply(FUN = pairwise_fun_wrapper,index1 = index[,1], index2 = index[,2],
MoreArgs = list(net.stat.fun = net.stat.fun, net.stat.fun.args = net.stat.fun.args))
#
# toReturn = methods::new("NetStatSet",fun = netSet@fun,
#                         fun.name = netSet@fun.name,
#                         fun.args = netSet@fun.args,
#                         stat.fun = net.stat.fun,
#                         stat.fun.name = net.stat.name,
#                         stat.fun.args = net.stat.fun.args,
#                         orig.net.name = netSet@orig.net.name,
#                         orig.net.stat = orig.stat,
#                         nets.stat = nets.stat,
#                         nets.names = netSet@nets.names)
return(pairwise.vector)
})
testPair = pairwise_net_stat_apply(testSet, edit_dist)
setMethod("pairwise_net_stat_apply", signature = c(netSet = "NetSample", net.stat.fun = "ANY",
net.stat.fun.args = "ANY", net.stat.name = "ANY",
symmetric = "ANY", self.comp = "ANY"),
function(netSet, net.stat.fun, net.stat.fun.args, net.stat.name, symmetric = TRUE, self.comp = FALSE){
if(missing(net.stat.name)){
net.stat.name = deparse(substitute(net.stat.fun))
}
net.stat.fun = match.fun(net.stat.fun)
if(missing(net.stat.fun.args)){
net.stat.fun.args = list()
}
nNets = length(netSet@nets)
if(symmetric){
index = t(combn(1:nNets, 2))
}else{
index = t(cbind(combn(1:nNets, 2), combn(nNets:1, 2)))
}
if(self.comp){
index = rbind(index,cbind(1:nNets, 1:nNets))
}
pairwise.vector = mapply(FUN = pairwise_fun_wrapper,index1 = index[,1], index2 = index[,2],
MoreArgs = list(nets = NetSet@nets, net.stat.fun = net.stat.fun, net.stat.fun.args = net.stat.fun.args))
#
# toReturn = methods::new("NetStatSet",fun = netSet@fun,
#                         fun.name = netSet@fun.name,
#                         fun.args = netSet@fun.args,
#                         stat.fun = net.stat.fun,
#                         stat.fun.name = net.stat.name,
#                         stat.fun.args = net.stat.fun.args,
#                         orig.net.name = netSet@orig.net.name,
#                         orig.net.stat = orig.stat,
#                         nets.stat = nets.stat,
#                         nets.names = netSet@nets.names)
return(pairwise.vector)
})
testPair = pairwise_net_stat_apply(testSet, edit_dist)
setMethod("pairwise_net_stat_apply", signature = c(netSet = "NetSample", net.stat.fun = "ANY",
net.stat.fun.args = "ANY", net.stat.name = "ANY",
symmetric = "ANY", self.comp = "ANY"),
function(netSet, net.stat.fun, net.stat.fun.args, net.stat.name, symmetric = TRUE, self.comp = FALSE){
if(missing(net.stat.name)){
net.stat.name = deparse(substitute(net.stat.fun))
}
net.stat.fun = match.fun(net.stat.fun)
if(missing(net.stat.fun.args)){
net.stat.fun.args = list()
}
nNets = length(netSet@nets)
if(symmetric){
index = t(combn(1:nNets, 2))
}else{
index = t(cbind(combn(1:nNets, 2), combn(nNets:1, 2)))
}
if(self.comp){
index = rbind(index,cbind(1:nNets, 1:nNets))
}
pairwise.vector = mapply(FUN = pairwise_fun_wrapper,index1 = index[,1], index2 = index[,2],
MoreArgs = list(nets = netSet@nets, net.stat.fun = net.stat.fun, net.stat.fun.args = net.stat.fun.args))
#
# toReturn = methods::new("NetStatSet",fun = netSet@fun,
#                         fun.name = netSet@fun.name,
#                         fun.args = netSet@fun.args,
#                         stat.fun = net.stat.fun,
#                         stat.fun.name = net.stat.name,
#                         stat.fun.args = net.stat.fun.args,
#                         orig.net.name = netSet@orig.net.name,
#                         orig.net.stat = orig.stat,
#                         nets.stat = nets.stat,
#                         nets.names = netSet@nets.names)
return(pairwise.vector)
})
testPair = pairwise_net_stat_apply(testSet, edit_dist)
pairwise_fun_wrapper <- function(index1, index2, nets, net.stat.fun, net.stat.fun.args ){
return(do.call(net.stat.fun, args = c(list(nets[[index1]], nets[[index2]]), net.stat.fun.args)))
}
testPair = pairwise_net_stat_apply(testSet, edit_dist)
edit_dist <- function(Net1, Net2){
nNodes = dim(Net1@net)[[1]]
editDist = mean(abs(Net1@net - Net2@net))/(((nNodes-1)*nNodes)/2)
return(editDist)
}
testPair = pairwise_net_stat_apply(testSet, edit_dist)
setMethod("pairwise_net_stat_apply", signature = c(netSet = "NetSample", net.stat.fun = "ANY",
net.stat.fun.args = "ANY", net.stat.name = "ANY",
symmetric = "ANY", self.comp = "ANY"),
function(netSet, net.stat.fun, net.stat.fun.args, net.stat.name, symmetric = TRUE, self.comp = FALSE){
if(missing(net.stat.name)){
net.stat.name = deparse(substitute(net.stat.fun))
}
net.stat.fun = match.fun(net.stat.fun)
if(missing(net.stat.fun.args)){
net.stat.fun.args = list()
}
nNets = length(netSet@nets)
if(symmetric){
index = t(combn(1:nNets, 2))
}else{
index = t(cbind(combn(1:nNets, 2), combn(nNets:1, 2)))
}
if(self.comp){
index = rbind(index,cbind(1:nNets, 1:nNets))
}
pairwise.vector = mapply(FUN = pairwise_fun_wrapper,index1 = index[,1], index2 = index[,2],
MoreArgs = list(nets = netSet@nets, net.stat.fun = net.stat.fun,
net.stat.fun.args = net.stat.fun.args), SIMPLIFY = F)
resMat = matrix(NA, nNets, nNets)
resMat[index] = pairwise.vector
#
# toReturn = methods::new("NetStatSet",fun = netSet@fun,
#                         fun.name = netSet@fun.name,
#                         fun.args = netSet@fun.args,
#                         stat.fun = net.stat.fun,
#                         stat.fun.name = net.stat.name,
#                         stat.fun.args = net.stat.fun.args,
#                         orig.net.name = netSet@orig.net.name,
#                         orig.net.stat = orig.stat,
#                         nets.stat = nets.stat,
#                         nets.names = netSet@nets.names)
return(resMat)
})
testPair = pairwise_net_stat_apply(testSet, edit_dist)
setMethod("pairwise_net_stat_apply", signature = c(netSet = "NetSample", net.stat.fun = "ANY",
net.stat.fun.args = "ANY", net.stat.name = "ANY",
symmetric = "ANY", self.comp = "ANY"),
function(netSet, net.stat.fun, net.stat.fun.args, net.stat.name, symmetric = TRUE, self.comp = FALSE){
if(missing(net.stat.name)){
net.stat.name = deparse(substitute(net.stat.fun))
}
net.stat.fun = match.fun(net.stat.fun)
if(missing(net.stat.fun.args)){
net.stat.fun.args = list()
}
nNets = length(netSet@nets)
if(symmetric){
index = t(combn(1:nNets, 2))
}else{
index = t(cbind(combn(1:nNets, 2), combn(nNets:1, 2)))
}
if(self.comp){
index = rbind(index,cbind(1:nNets, 1:nNets))
}
pairwise.vector = mapply(FUN = pairwise_fun_wrapper,index1 = index[,1], index2 = index[,2],
MoreArgs = list(nets = netSet@nets, net.stat.fun = net.stat.fun,
net.stat.fun.args = net.stat.fun.args))
resMat = matrix(NA, nNets, nNets)
resMat[index] = pairwise.vector
#
# toReturn = methods::new("NetStatSet",fun = netSet@fun,
#                         fun.name = netSet@fun.name,
#                         fun.args = netSet@fun.args,
#                         stat.fun = net.stat.fun,
#                         stat.fun.name = net.stat.name,
#                         stat.fun.args = net.stat.fun.args,
#                         orig.net.name = netSet@orig.net.name,
#                         orig.net.stat = orig.stat,
#                         nets.stat = nets.stat,
#                         nets.names = netSet@nets.names)
return(resMat)
})
testPair = pairwise_net_stat_apply(testSet, edit_dist)
View(testPair)
